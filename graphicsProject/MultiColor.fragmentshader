#version 330 core

// input data
in vec3 fragmentColor;
varying vec3 position_worldspace;
varying vec3 normal_worldspace;
in vec2 TexCoord;

uniform vec3 LightPosition_worldspace;
uniform vec3 EyePosition_worldspace;
uniform vec3 ambientLight;


// Ouput data
out vec3 color;

//texture sampler
uniform sampler2D myTextureSampler;
uniform int RenderingMode;
void main()
{


    
	// Diffuse light calculations.
	vec3 lightVector = normalize(LightPosition_worldspace - position_worldspace);
	float brightness = dot(lightVector,normal_worldspace);
	vec3 diffuseLight = vec3(brightness,brightness,brightness);
	diffuseLight = clamp(diffuseLight,0,1);

	//Specular light calculations.
	vec3 reflectedLightVector = reflect(-lightVector,normal_worldspace);
	vec3 eyeDirectionVector = normalize(EyePosition_worldspace - position_worldspace);
	float specularity = dot(reflectedLightVector,eyeDirectionVector);
	float specularExponent = 50;
	specularity = pow(specularity,specularExponent);
	vec3 specularLight = vec3(specularity,specularity,specularity);
	specularLight = clamp(specularLight,0,1);

	gl_FragColor = vec4(ambientLight,1) + vec4(diffuseLight,1) + vec4(specularLight,1);
	//finish light
	//1) calculate fragment color from sent color only.
	if(RenderingMode == 0)
		color = fragmentColor;
	//2) calculate fragment color from sample extracted by the sampler.
	if(RenderingMode == 1)
		color = texture( myTextureSampler, TexCoord ).rgb;
	//3) calculate fragment color by combining the fragment color and the texture sample.
	if(RenderingMode == 2)
		color = texture(myTextureSampler, TexCoord).rgb + fragmentColor;
}